(colSums(!is.na(col)) > 0)
models <- unique(dat$model)
parameters <- c("a", "bMinus", "Db", "h", "b", "B", "bPlus", "e", "s", "t", "y")
param_results <- c()
for (parameter in parameters) {
param_results <- c(param_results, paste(parameter, ".mean", sep=""), paste(parameter, ".mdn", sep=""), paste(parameter, ".sd", sep=""))
}
eval <- data.frame(matrix(ncol = 38, nrow = 0))
x <- c(c("model", "species"), param_results, c("meanPerformance", "mdnPerformance", "sdPerformance"))
colnames(eval) <- x
for (model in models){
for (species in c("Human", "Wasp", "Monkey", "Pigeon")){
eval[nrow(eval) + 1,] = c(model, species, rep.int(NA, 36))
}
}
for (model in models){
for (species in c("Human", "Wasp", "Monkey", "Pigeon")){
for (parameter in parameters) {
i <- 0
funs <- c("mean", "mdn", "sd")
for (fun in c(mean, median, sd)) {
i <- i+1
col <- dat[(dat$model==model) & (dat$species==species), ][parameter]
if (colSums(!is.na(col)) > 0) {
eval[(eval$model==model) & (eval$species==species), ][paste(parameter, funs[i], sep=".")] <- fun(col)
}
}
}
}
}
for (model in models){
for (species in c("Human", "Wasp", "Monkey", "Pigeon")){
for (parameter in parameters) {
i <- 0
funs <- c("mean", "mdn", "sd")
for (fun in c(mean, median, sd)) {
i <- i+1
col <- dat[(dat$model==model) & (dat$species==species), ][parameter]
#if (colSums(!is.na(col)) > 0) {
try(eval[(eval$model==model) & (eval$species==species), ][paste(parameter, funs[i], sep=".")] <- fun(col), silent=TRUE)
#}
}
}
}
}
for (model in models){
for (species in c("Human", "Wasp", "Monkey", "Pigeon")){
for (parameter in parameters) {
i <- 0
funs <- c("mean", "mdn", "sd")
for (fun in c(mean, median, sd)) {
i <- i+1
col <- dat[(dat$model==model) & (dat$species==species), ][parameter]
#if (colSums(!is.na(col)) > 0) {
try({
fun(col)
eval[(eval$model==model) & (eval$species==species), ][paste(parameter, funs[i], sep=".")] <- fun(col)
}
, silent=TRUE)
#}
}
}
}
}
for (model in models){
for (species in c("Human", "Wasp", "Monkey", "Pigeon")){
for (parameter in parameters) {
i <- 0
funs <- c("mean", "mdn", "sd")
for (fun in c(mean, median, sd)) {
i <- i+1
col <- dat[(dat$model==model) & (dat$species==species), ][parameter]
#if (colSums(!is.na(col)) > 0) {
try(fun(col))
try({
fun(col)
eval[(eval$model==model) & (eval$species==species), ][paste(parameter, funs[i], sep=".")] <- fun(col)
}
, silent=TRUE)
#}
}
}
}
}
model <- "SiemannDelius"
parameter <- "bMinus"
col <- dat[(dat$model==model) & (dat$species==species), ][parameter]
col
#if (colSums(!is.na(col)) > 0) {
try(fun(col))
sd(col)
mean(col)
col <- as.numeric(unlist(col))
col
mean(col)
sd(col)
median(col)
for (model in models){
for (species in c("Human", "Wasp", "Monkey", "Pigeon")){
for (parameter in parameters) {
i <- 0
funs <- c("mean", "mdn", "sd")
for (fun in c(mean, median, sd)) {
i <- i+1
col <- dat[(dat$model==model) & (dat$species==species), ][parameter]
col <- as.numeric(unlist(col))
#if (colSums(!is.na(col)) > 0) {
try(fun(col))
try({
fun(col)
eval[(eval$model==model) & (eval$species==species), ][paste(parameter, funs[i], sep=".")] <- fun(col)
}
, silent=TRUE)
#}
}
}
}
}
for (model in models){
for (species in c("Human", "Wasp", "Monkey", "Pigeon")){
for (parameter in parameters) {
i <- 0
funs <- c("mean", "mdn", "sd")
for (fun in c(mean, median, sd)) {
i <- i+1
col <- dat[(dat$model==model) & (dat$species==species), ][parameter]
col <- as.numeric(unlist(col))
#if (colSums(!is.na(col)) > 0) {
try(fun(col))
try({
fun(col)
eval[(eval$model==model) & (eval$species==species), ][paste(parameter, funs[i], sep=".")] <- fun(col)
}
, silent=TRUE)
#}
eval[(eval$model==model) & (eval$species==species), ]$meanPerformance <- mean(dat[(dat$model==model) & (dat$species==species), ]$performance)
eval[(eval$model==model) & (eval$species==species), ]$mdnPerformance <- mean(dat[(dat$model==model) & (dat$species==species), ]$performance)
eval[(eval$model==model) & (eval$species==species), ]$sdPerformance <- mean(dat[(dat$model==model) & (dat$species==species), ]$performance)
}
}
}
}
for (model in models){
for (species in c("Human", "Wasp", "Monkey", "Pigeon")){
for (parameter in parameters) {
i <- 0
funs <- c("mean", "mdn", "sd")
for (fun in c(mean, median, sd)) {
i <- i+1
col <- dat[(dat$model==model) & (dat$species==species), ][parameter]
col <- as.numeric(unlist(col))
#if (colSums(!is.na(col)) > 0) {
try(fun(col))
try({
fun(col)
eval[(eval$model==model) & (eval$species==species), ][paste(parameter, funs[i], sep=".")] <- fun(col)
}
, silent=TRUE)
#}
eval[(eval$model==model) & (eval$species==species), ]$meanPerformance <- mean(dat[(dat$model==model) & (dat$species==species), ]$performance)
eval[(eval$model==model) & (eval$species==species), ]$mdnPerformance <- median(dat[(dat$model==model) & (dat$species==species), ]$performance)
eval[(eval$model==model) & (eval$species==species), ]$sdPerformance <- sd(dat[(dat$model==model) & (dat$species==species), ]$performance)
}
}
}
}
for (model in models){
for (species in c("Human", "Wasp", "Monkey", "Pigeon")){
for (parameter in parameters) {
i <- 0
funs <- c("mean", "mdn", "sd")
for (fun in c(mean, median, sd)) {
i <- i+1
dat_slice <- dat[(dat$model==model) & (dat$species==species), ]
col <- dat_slice[parameter]
col <- as.numeric(unlist(col))
#if (colSums(!is.na(col)) > 0) {
try(fun(col))
try({
fun(col)
eval[(eval$model==model) & (eval$species==species), ][paste(parameter, funs[i], sep=".")] <- fun(col)
}
, silent=TRUE)
#}
eval[(eval$model==model) & (eval$species==species), ]$meanPerformance <- mean(dat_slice$performance)
eval[(eval$model==model) & (eval$species==species), ]$mdnPerformance <- median(dat_slice$performance)
eval[(eval$model==model) & (eval$species==species), ]$sdPerformance <- sd(dat_slice$performance)
boxplot(dat_slice$performance)
}
}
}
}
boxplot(species~a, data=eval)
boxplot(species~a, data=dat_slice)
boxplot(species~bMinus, data=dat_slice)
boxplot(species~bMinus, data=dat[dat$model=="SiemannDelius"])
boxplot(species~bMinus, data=dat[dat$model=="SiemannDelius",])
boxPlot(dat$bMinus, dat$species)
boxplot(bMinus~species, data=dat[dat$model=="SiemannDelius",])
View(rlelo)
boxplot(a~species, data=dat[dat$model=="RLELO",])
boxplot(a~species, data=dat[dat$model=="RLELO",], ylab="Parameter value")
boxplot(a~species, data=dat[dat$model=="RLELO",], ylab="Parameter value after optimization")
boxplot(b~species, data=dat[dat$model=="RLELO",], ylab="Parameter value after optimization")
View(rescorlaWynne)
View(rescorlaWynne)
boxplot(a~species, data=dat[dat$model=="RescorlaWagnerWynne95",], ylab="Parameter value after optimization")
boxplot(B~species, data=dat[dat$model=="RescorlaWagnerWynne95",], ylab="Parameter value after optimization")
View(sct)
boxplot(a~species, data=dat[dat$model=="SCT",], ylab="Parameter value after optimization")
View(Trabasso)
boxplot(h~species, data=dat[dat$model=="Trabasso",], ylab="Parameter value after optimization")
View(vttbs)
boxplot(a~species, data=dat[dat$model=="VTTBS",], ylab="Parameter value after optimization")
boxplot(b~species, data=dat[dat$model=="VTTBS",], ylab="Parameter value after optimization")
boxplot(t~species, data=dat[dat$model=="VTTBS",], ylab="Parameter value after optimization")
png("hello")
png("rlelo_a")
boxplot(a~species, data=dat[dat$model=="RLELO",], ylab="Parameter value after optimization")
dev.off()
summary(eval$meanPerformance)
eval$meanPerformance <- as.double(eval$meanPerformance)
eval$mdnPerformance <- as.double(eval$mdnPerformance)
eval$sdPerformance <- as.double(eval$sdPerformance)
summary(eval$meanPerformance)
wasps <- dat[dat$species =="Wasp", ]
wasps
wasp
wasps
wilcox.test(wasps[wasps$model]=="SiemannDelius")
max(eval[eval$species=="Wasp"])
max(eval[eval$species=="Wasp"]$meanPerformance)
max(eval[eval$species=="Wasp",]$meanPerformance)
eval[eval$species=="Wasp",]$meanPerformance
wilcox.test(wasps[wasps$model=="SiemannDelius",]$performance, wasps[wasps$model=="configuralCuesWynne95",]$performance)
max(eval[eval$species=="Pigeon"]$meanPerformance)
max(eval[eval$species=="Pigeon",]$meanPerformance)
eval[eval$species=="Pigeon",]$meanPerformance
eval[eval$species=="Pigeon",]
wilcox.test(wasps[wasps$model=="RLELO_F",]$performance, wasps[wasps$model=="Trabasso",]$performance)
max(eval[eval$species=="Monkey",]$meanPerformance)
eval[eval$species=="Monkey",]$meanPerformance
wilcox.test(pigeons[pigeons$model=="RLELO_F",]$performance, pigeons[pigeons$model=="Trabasso",]$performance)
pigeons <- dat[dat$species =="Pigeon",] # RLELO_F ; Trabasso
wilcox.test(pigeons[pigeons$model=="RLELO_F",]$performance, pigeons[pigeons$model=="Trabasso",]$performance)
wasps <- dat[dat$species =="Wasp", ]  # best models: Siemann Delius ; configuralCuesWynne95
wilcox.test(wasps[wasps$model=="SiemannDelius",]$performance, wasps[wasps$model=="configuralCuesWynne95",]$performance)
monkeys <- dat[dat$species =="Monkey",] # Siemann Delius ; Trabasso
wilcox.test(monkeys[monkeys$model=="RLELO_F",]$performance, monkeys[monkeys$model=="Trabasso",]$performance)
humans <- dat[dat$species == "Human",]
humans <- dat[dat$species == "Human",]
humans
eval[eval$species=="Human",]$meanPerformance
eval[eval$species=="Human",]
humans <- dat[dat$species == "Human",] #configuralCuesWynne95 ; RLELO
wilcox.test(humans[humans$model=="configuralCuesWynne95",]$performance, humans[humans$model=="RLELO",]$performance)
max(eval$meanPerformance)
pigeons <- dat[dat$species =="Pigeon",] # RLELO_F ; Trabasso
wilcox.test(pigeons[pigeons$model=="RLELO_F",]$performance, pigeons[pigeons$model=="Trabasso",]$performance)
pigeons <- dat[dat$species =="Pigeon",] # RLELO_F ; Trabasso
wilcox.test(pigeons[pigeons$model=="Trabasso",]$performance, pigeons[pigeons$model=="RLELO_F",]$performance)
eval[eval$species=="Pigeon"]
eval[eval$species=="Pigeon",]
wilcox.test(pigeons[pigeons$model=="RLELO_F",]$performance, pigeons[pigeons$model=="Trabasso",]$performance)
wasps
eval[eval$model=="SiemannDelius"]
eval[eval$model=="SiemannDelius",]
eval[eval$model=="RLELO",]
eval[eval$model=="RLELO_F",]
eval[eval$model=="Trabasso",]
unique(dat$model)
# Performance of the species
correct <- dat[dat$model== "CorrectReply", ]
correct
boxplot(performance~species, data=correct)
dat <- read_csv("Documents/repos/cogsci/transitive-inference-models/parametersPerPersonNonAdapt.csv")
library(readr)
dat <- read_csv("Documents/repos/cogsci/transitive-inference-models/parametersPerPersonNonAdapt.csv")
library(readr)
dat <- read_csv("parametersPerPersonNonAdapt.csv")
library(readr)
dat <- read_csv("parametersPerPersonNonAdapt.csv")
problems()
library(readr)
dat <- read_csv("parametersPerPersonNonAdapt.csv")
library(readr)
dat <- read_csv("parametersPerPersonNonAdapt.csv")
dat$id
"D139" %in% dat$id
library(readr)
dat <- read_csv("parametersPerPersonNonAdapt.csv", colClasses=c("id"="character"))
library(readr)
dat <- read_csv("parametersPerPersonNonAdapt.csv", colClasses=c(id="character"))
library(readr)
dat <- read_csv("parametersPerPersonNonAdapt.csv")
data_wide <- spread(dat, parameter1, value1)
data_wide <- spread(data_wide, parameter2, value2)
data_wide <- spread(data_wide, parameter3, value3)
View(dat)
data_wide <- spread(dat, parameter1, value1)
library(readr)
parametersPerPersonNonAdapt <- read_csv("parametersPerPersonNonAdapt.csv",
col_types = cols(id = col_character(),
parameter2 = col_character(), parameter3 = col_character(),
value2 = col_double(), value3 = col_double()))
View(parametersPerPersonNonAdapt)
dat <-read_csv("parametersPerPersonNonAdapt.csv",
col_types = cols(id = col_character(),
parameter2 = col_character(), parameter3 = col_character(),
value2 = col_double(), value3 = col_double()))
data_wide <- spread(dat, parameter1, value1)
data_wide <- spread(data_wide, parameter2, value2)
data_wide <- spread(data_wide, parameter3, value3)
View(data_wide)
models <- unique(dat$model)
parameters <- c("a", "bMinus", "Db", "h", "b", "B", "bPlus", "e", "s", "t", "y")
param_results <- c()
for (parameter in parameters) {
param_results <- c(param_results, paste(parameter, ".mean", sep=""), paste(parameter, ".mdn", sep=""), paste(parameter, ".sd", sep=""))
}
eval <- data.frame(matrix(ncol = 38, nrow = 0))
x <- c(c("model", "species"), param_results, c("meanPerformance", "mdnPerformance", "sdPerformance"))
colnames(eval) <- x
for (model in models){
for (species in c("Human", "Wasp", "Monkey", "Pigeon")){
eval[nrow(eval) + 1,] = c(model, species, rep.int(NA, 36))
}
}
for (model in models){
for (species in c("Human", "Wasp", "Monkey", "Pigeon")){
for (parameter in parameters) {
i <- 0
funs <- c("mean", "mdn", "sd")
for (fun in c(mean, median, sd)) {
i <- i+1
dat_slice <- dat[(dat$model==model) & (dat$species==species), ]
col <- dat_slice[parameter]
col <- as.numeric(unlist(col))
#if (colSums(!is.na(col)) > 0) {
try(fun(col))
try({
fun(col)
eval[(eval$model==model) & (eval$species==species), ][paste(parameter, funs[i], sep=".")] <- fun(col)
}
, silent=TRUE)
#}
eval[(eval$model==model) & (eval$species==species), ]$meanPerformance <- mean(dat_slice$performance)
eval[(eval$model==model) & (eval$species==species), ]$mdnPerformance <- median(dat_slice$performance)
eval[(eval$model==model) & (eval$species==species), ]$sdPerformance <- sd(dat_slice$performance)
}
}
}
}
dat <- data_wide
models <- unique(dat$model)
parameters <- c("a", "bMinus", "Db", "h", "b", "B", "bPlus", "e", "s", "t", "y")
param_results <- c()
for (parameter in parameters) {
param_results <- c(param_results, paste(parameter, ".mean", sep=""), paste(parameter, ".mdn", sep=""), paste(parameter, ".sd", sep=""))
}
eval <- data.frame(matrix(ncol = 38, nrow = 0))
x <- c(c("model", "species"), param_results, c("meanPerformance", "mdnPerformance", "sdPerformance"))
colnames(eval) <- x
for (model in models){
for (species in c("Human", "Wasp", "Monkey", "Pigeon")){
eval[nrow(eval) + 1,] = c(model, species, rep.int(NA, 36))
}
}
for (model in models){
for (species in c("Human", "Wasp", "Monkey", "Pigeon")){
for (parameter in parameters) {
i <- 0
funs <- c("mean", "mdn", "sd")
for (fun in c(mean, median, sd)) {
i <- i+1
dat_slice <- dat[(dat$model==model) & (dat$species==species), ]
col <- dat_slice[parameter]
col <- as.numeric(unlist(col))
#if (colSums(!is.na(col)) > 0) {
try(fun(col))
try({
fun(col)
eval[(eval$model==model) & (eval$species==species), ][paste(parameter, funs[i], sep=".")] <- fun(col)
}
, silent=TRUE)
#}
eval[(eval$model==model) & (eval$species==species), ]$meanPerformance <- mean(dat_slice$performance)
eval[(eval$model==model) & (eval$species==species), ]$mdnPerformance <- median(dat_slice$performance)
eval[(eval$model==model) & (eval$species==species), ]$sdPerformance <- sd(dat_slice$performance)
}
}
}
}
unique(dat$species)
models <- unique(dat$model)
parameters <- c("a", "bMinus", "Db", "h", "b", "B", "bPlus", "e", "s", "t", "y")
param_results <- c()
for (parameter in parameters) {
param_results <- c(param_results, paste(parameter, ".mean", sep=""), paste(parameter, ".mdn", sep=""), paste(parameter, ".sd", sep=""))
}
eval <- data.frame(matrix(ncol = 38, nrow = 0))
x <- c(c("model", "species"), param_results, c("meanPerformance", "mdnPerformance", "sdPerformance"))
colnames(eval) <- x
for (model in models){
for (species in unique(dat$species)){
eval[nrow(eval) + 1,] = c(model, species, rep.int(NA, 36))
}
}
View(eval)
for (model in models){
for (species in unique(dat$species)){
for (parameter in parameters) {
i <- 0
funs <- c("mean", "mdn", "sd")
for (fun in c(mean, median, sd)) {
i <- i+1
dat_slice <- dat[(dat$model==model) & (dat$species==species), ]
col <- dat_slice[parameter]
col <- as.numeric(unlist(col))
#if (colSums(!is.na(col)) > 0) {
try(fun(col))
try({
fun(col)
eval[(eval$model==model) & (eval$species==species), ][paste(parameter, funs[i], sep=".")] <- fun(col)
}
, silent=TRUE)
#}
eval[(eval$model==model) & (eval$species==species), ]$meanPerformance <- mean(dat_slice$performance)
eval[(eval$model==model) & (eval$species==species), ]$mdnPerformance <- median(dat_slice$performance)
eval[(eval$model==model) & (eval$species==species), ]$sdPerformance <- sd(dat_slice$performance)
}
}
}
}
models <- unique(dat$model)
parameters <- c("a", "bMinus", "Db", "h", "b", "B", "bPlus", "e", "s", "t", "y")
param_results <- c()
for (parameter in parameters) {
param_results <- c(param_results, paste(parameter, ".mean", sep=""), paste(parameter, ".mdn", sep=""), paste(parameter, ".sd", sep=""))
}
eval <- data.frame(matrix(ncol = 38, nrow = 0))
x <- c(c("model", "species"), param_results, c("meanPerformance", "mdnPerformance", "sdPerformance"))
colnames(eval) <- x
for (model in models){
for (species in unique(dat$species)){
eval[nrow(eval) + 1,] = c(model, species, rep.int(NA, 36))
}
}
for (model in models){
for (species in unique(dat$species)){
for (parameter in parameters) {
i <- 0
funs <- c("mean", "mdn", "sd")
for (fun in c(mean, median, sd)) {
i <- i+1
dat_slice <- dat[(dat$model==model) & (dat$species==species), ]
col <- dat_slice[parameter]
col <- as.numeric(unlist(col))
#if (colSums(!is.na(col)) > 0) {
try(fun(col))
try({
fun(col)
eval[(eval$model==model) & (eval$species==species), ][paste(parameter, funs[i], sep=".")] <- fun(col)
}
, silent=TRUE)
#}
eval[(eval$model==model) & (eval$species==species), ]$meanPerformance <- mean(dat_slice$performance)
eval[(eval$model==model) & (eval$species==species), ]$mdnPerformance <- median(dat_slice$performance)
eval[(eval$model==model) & (eval$species==species), ]$sdPerformance <- sd(dat_slice$performance)
}
}
}
}
correct <- dat[dat$model== "CorrectReply", ]
correct
library(readr)
dat <-read_csv("parametersPerPersonNonAdapt.csv",
col_types = cols(id = col_character(),
parameter2 = col_character(), parameter3 = col_character(),
value2 = col_double(), value3 = col_double()))
library(tidyr)
dat <- dat[(dat$onlyTrainingOptimization == TRUE & adaptModelInTesting == FALSE), ]
data_wide <- spread(dat, parameter1, value1)
data_wide <- spread(data_wide, parameter2, value2)
data_wide <- spread(data_wide, parameter3, value3)
dat <- data_wide
library(readr)
dat <-read_csv("parametersPerPersonNonAdapt.csv",
col_types = cols(id = col_character(),
parameter2 = col_character(), parameter3 = col_character(),
value2 = col_double(), value3 = col_double()))
library(tidyr)
dat <- dat[(dat$onlyTrainingOptimization == TRUE & adaptModelInTesting == FALSE), ]
dat
dat <- dat[(dat$onlyTrainingOptimization == TRUE) & (adaptModelInTesting == FALSE), ]
dat <-read_csv("parametersPerPersonNonAdapt.csv",
col_types = cols(id = col_character(),
parameter2 = col_character(), parameter3 = col_character(),
value2 = col_double(), value3 = col_double()))
dat <- dat[(dat$onlyTrainingOptimization == TRUE) & (dat$adaptModelInTesting == FALSE), ]
data_wide <- spread(dat, parameter1, value1)
data_wide <- spread(data_wide, parameter2, value2)
data_wide <- spread(data_wide, parameter3, value3)
dat <- data_wide
# Performance of the species
correct <- dat[dat$model== "CorrectReply", ]
correct
boxplot(performance~species, data=correct)
unique(correct$species)
correct$species <- as.factor(correct$species)
correct
boxplot(performance~species, data=correct)
